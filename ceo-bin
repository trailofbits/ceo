#!/usr/bin/env python2

from argparse import ArgumentParser
from sys import argv, exit, maxint
from random import seed, choice

from ceo.boot     import init
from ceo.testcase import Testcase, load_targets, load_testcases
from ceo.exploration import explore
from ceo.test     import test, stats
from ceo.actions  import MinimizeTestcaseAFL, MinimizeInputsAFL
from ceo.parameters  import init_parameter_generators
from ceo.storage   import Storage
from ceo.labels   import lbls
from ceo.reduce  import reduce_inputs, reduce_testcase
from ceo.extraction  import get_features
from ceo.features import features_list

'''

CEO

'''

def parse_arguments():
    ###########################################################################
    # parse arguments
    parser = ArgumentParser(description='')

    parser.add_argument('--seed', type=int, default=None,
                        help="Random seed to use")

    parser.add_argument('--cpus', type=int, default=None,
                        help="Number of CPUs to use")

    parser.add_argument('--number', type=int, default=maxint,
                        help="Number of test cases to analyze")

    parser.add_argument('--features', type=str, default=None,
                        help="")

    parser.add_argument('--extraction-timeout', type=int, default=300,
                        help="Timeout of the feature extraction")

    parser.add_argument('--exploration-timeout', type=int, default=600,
                        help="Timeout of the test case exploration")

    parser.add_argument('--options', type=str, default="afl,mcore,grr",
                        help="")

    parser.add_argument('--storage', type=str, default="ceo",
                        help="A folder name to store the data.")

    parser.add_argument('--verbose', type=int, default=0,
                        help="Verbosity level")

    parser.add_argument('targets', type=str,
                        help="Target file containing one executable program per line")

    parser.add_argument('mode', type=str,
                        help="Mode (init/collect/train/test/stats/plot)")

    parsed = parser.parse_args()
    return parsed

if __name__ == '__main__':


    args = parse_arguments()
    all_options = ["afl", "mcore", "grr"]
    mode = args.mode
    target_filename = args.targets
    storage_dir = args.storage
    verbosity = args.verbose
    myseed = args.seed

    seed(myseed)

    # resource limits
    extraction_timeout = args.extraction_timeout
    exploration_timeout = args.exploration_timeout
    cpus = args.cpus
    nsamples = args.number

    if nsamples <= 0:
        print "[-] Invalid number of test cases to analyze."
        exit(1)

    options = []
    for option in args.options.split(","):
        if option in all_options:
            options.append(option)
        else:
            print "[-]", repr(option),"is invalid."
            exit(1)

    features = []
    if args.features is None:
        features = features_list
    else:
        for feature in args.features.split(","):
            if feature in features_list:
                features.append(feature)
            else:
                print "[-]", repr(feature),"is invalid."
                exit(1)
 
    #print "[+] Testcases(s) loaded."
    #print "[+] Initilization storage at "+storage_dir

    if mode == "init":
        init(options, target_filename, nsamples, cpus, extraction_timeout, storage=storage_dir, verbose=verbosity)
        exit(0)

    if mode == "test":
        test(options, target_filename, cpus, extraction_timeout, storage=storage_dir, verbose=verbosity)
        exit(0)

    if mode == "stats":
        stats(options, features, target_filename, cpus, storage=storage_dir, verbose=verbosity)
        exit(0)

    if mode == "collect":

        names, paths = load_targets(target_filename)
        print "[+] Initilization vectorizer(s) ..."
        policy = Storage(storage_dir, features_list, options)
        print "[+] Collecting data to train"
 
        for _ in xrange(nsamples):
            name, path = choice(zip(names, paths))
            print "[+] Picked up", name
            if "afl" in options:
                reduce_inputs(name+"/inputs", path, verbose=verbosity)
            testcases = load_testcases([name], [path])
            tc = choice(testcases)

            if "afl" in options:
                tc_min, label = reduce_testcase(tc, verbose=verbosity)
            else:
                tc_min = tc

            if len(tc_min) == 0:
                print "[+] Discarding empty test case"
                continue

            print "[+] Randomly selected test case", tc_min, "to explore" 
 
            if tc_min in policy:
                print str(tc_min),"exec features already there!"
                continue
            else:
                exec_features = get_features(tc_min, extraction_timeout)

            labels, param_features = explore(options, tc_min, exploration_timeout, verbose=verbosity)
            print tc_min, labels, param_features
            policy.add(tc_min, exec_features, param_features, labels)

    else:
        print "[-] Not implemented or invalid mode!"
